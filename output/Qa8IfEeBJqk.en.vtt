WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:01.829 align:start position:0%
 
haskell<00:00:00.719><c> a</c><00:00:00.960><c> statically</c><00:00:01.439><c> typed</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
haskell a statically typed
 

00:00:01.839 --> 00:00:03.830 align:start position:0%
haskell a statically typed
general-purpose<00:00:02.480><c> language</c><00:00:02.960><c> made</c><00:00:03.199><c> famous</c><00:00:03.679><c> for</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
general-purpose language made famous for
 

00:00:03.840 --> 00:00:05.670 align:start position:0%
general-purpose language made famous for
expanding<00:00:04.319><c> the</c><00:00:04.400><c> minds</c><00:00:04.640><c> of</c><00:00:04.720><c> developers</c><00:00:05.440><c> into</c>

00:00:05.670 --> 00:00:05.680 align:start position:0%
expanding the minds of developers into
 

00:00:05.680 --> 00:00:07.430 align:start position:0%
expanding the minds of developers into
the<00:00:05.759><c> functional</c><00:00:06.240><c> programming</c><00:00:06.720><c> paradigm</c><00:00:07.279><c> you</c>

00:00:07.430 --> 00:00:07.440 align:start position:0%
the functional programming paradigm you
 

00:00:07.440 --> 00:00:09.430 align:start position:0%
the functional programming paradigm you
see<00:00:07.839><c> haskell</c><00:00:08.400><c> is</c><00:00:08.480><c> a</c><00:00:08.639><c> purely</c><00:00:09.040><c> functional</c>

00:00:09.430 --> 00:00:09.440 align:start position:0%
see haskell is a purely functional
 

00:00:09.440 --> 00:00:11.589 align:start position:0%
see haskell is a purely functional
language<00:00:09.920><c> based</c><00:00:10.160><c> on</c><00:00:10.320><c> lambda</c><00:00:10.719><c> calculus</c><00:00:11.360><c> which</c>

00:00:11.589 --> 00:00:11.599 align:start position:0%
language based on lambda calculus which
 

00:00:11.599 --> 00:00:13.350 align:start position:0%
language based on lambda calculus which
means<00:00:11.840><c> a</c><00:00:12.000><c> function</c><00:00:12.559><c> always</c><00:00:12.799><c> produces</c><00:00:13.280><c> the</c>

00:00:13.350 --> 00:00:13.360 align:start position:0%
means a function always produces the
 

00:00:13.360 --> 00:00:15.749 align:start position:0%
means a function always produces the
same<00:00:13.679><c> output</c><00:00:14.240><c> given</c><00:00:14.559><c> the</c><00:00:14.639><c> same</c><00:00:14.960><c> input</c><00:00:15.440><c> unlike</c>

00:00:15.749 --> 00:00:15.759 align:start position:0%
same output given the same input unlike
 

00:00:15.759 --> 00:00:17.510 align:start position:0%
same output given the same input unlike
an<00:00:15.839><c> imperative</c><00:00:16.240><c> language</c><00:00:16.720><c> your</c><00:00:16.960><c> code</c><00:00:17.199><c> can't</c>

00:00:17.510 --> 00:00:17.520 align:start position:0%
an imperative language your code can't
 

00:00:17.520 --> 00:00:19.269 align:start position:0%
an imperative language your code can't
modify<00:00:17.920><c> the</c><00:00:18.080><c> inputs</c><00:00:18.480><c> or</c><00:00:18.640><c> produce</c><00:00:19.039><c> side</c>

00:00:19.269 --> 00:00:19.279 align:start position:0%
modify the inputs or produce side
 

00:00:19.279 --> 00:00:20.870 align:start position:0%
modify the inputs or produce side
effects<00:00:19.680><c> that</c><00:00:19.840><c> would</c><00:00:20.080><c> otherwise</c><00:00:20.480><c> change</c><00:00:20.800><c> the</c>

00:00:20.870 --> 00:00:20.880 align:start position:0%
effects that would otherwise change the
 

00:00:20.880 --> 00:00:22.950 align:start position:0%
effects that would otherwise change the
behavior<00:00:21.359><c> of</c><00:00:21.520><c> the</c><00:00:21.680><c> application</c><00:00:22.400><c> it</c><00:00:22.560><c> was</c><00:00:22.720><c> first</c>

00:00:22.950 --> 00:00:22.960 align:start position:0%
behavior of the application it was first
 

00:00:22.960 --> 00:00:25.189 align:start position:0%
behavior of the application it was first
developed<00:00:23.279><c> in</c><00:00:23.439><c> 1987</c><00:00:24.400><c> and</c><00:00:24.640><c> named</c><00:00:24.880><c> after</c>

00:00:25.189 --> 00:00:25.199 align:start position:0%
developed in 1987 and named after
 

00:00:25.199 --> 00:00:27.509 align:start position:0%
developed in 1987 and named after
logician<00:00:25.840><c> haskell</c><00:00:26.320><c> curry</c><00:00:26.800><c> whose</c><00:00:27.039><c> work</c><00:00:27.279><c> had</c><00:00:27.439><c> a</c>

00:00:27.509 --> 00:00:27.519 align:start position:0%
logician haskell curry whose work had a
 

00:00:27.519 --> 00:00:29.029 align:start position:0%
logician haskell curry whose work had a
massive<00:00:27.920><c> influence</c><00:00:28.400><c> on</c><00:00:28.480><c> the</c><00:00:28.640><c> functional</c>

00:00:29.029 --> 00:00:29.039 align:start position:0%
massive influence on the functional
 

00:00:29.039 --> 00:00:30.710 align:start position:0%
massive influence on the functional
programming<00:00:29.519><c> world</c><00:00:29.920><c> it's</c><00:00:30.160><c> been</c><00:00:30.320><c> used</c><00:00:30.640><c> to</c>

00:00:30.710 --> 00:00:30.720 align:start position:0%
programming world it's been used to
 

00:00:30.720 --> 00:00:32.470 align:start position:0%
programming world it's been used to
build<00:00:30.960><c> a</c><00:00:31.119><c> wide</c><00:00:31.359><c> variety</c><00:00:31.760><c> of</c><00:00:31.920><c> server-side</c>

00:00:32.470 --> 00:00:32.480 align:start position:0%
build a wide variety of server-side
 

00:00:32.480 --> 00:00:34.630 align:start position:0%
build a wide variety of server-side
applications<00:00:33.280><c> like</c><00:00:33.440><c> the</c><00:00:33.600><c> hasura</c><00:00:34.160><c> api</c>

00:00:34.630 --> 00:00:34.640 align:start position:0%
applications like the hasura api
 

00:00:34.640 --> 00:00:37.030 align:start position:0%
applications like the hasura api
platform<00:00:35.360><c> spam</c><00:00:35.680><c> filtering</c><00:00:36.160><c> at</c><00:00:36.239><c> facebook</c><00:00:36.800><c> and</c>

00:00:37.030 --> 00:00:37.040 align:start position:0%
platform spam filtering at facebook and
 

00:00:37.040 --> 00:00:39.350 align:start position:0%
platform spam filtering at facebook and
compilers<00:00:37.680><c> for</c><00:00:37.920><c> other</c><00:00:38.160><c> languages</c><00:00:38.719><c> like</c><00:00:38.960><c> elm</c>

00:00:39.350 --> 00:00:39.360 align:start position:0%
compilers for other languages like elm
 

00:00:39.360 --> 00:00:41.190 align:start position:0%
compilers for other languages like elm
and<00:00:39.440><c> purescript</c><00:00:40.079><c> and</c><00:00:40.239><c> it's</c><00:00:40.399><c> responsible</c><00:00:40.960><c> for</c>

00:00:41.190 --> 00:00:41.200 align:start position:0%
and purescript and it's responsible for
 

00:00:41.200 --> 00:00:42.950 align:start position:0%
and purescript and it's responsible for
a<00:00:41.280><c> countless</c><00:00:41.680><c> number</c><00:00:41.920><c> of</c><00:00:42.000><c> blog</c><00:00:42.320><c> posts</c><00:00:42.640><c> about</c>

00:00:42.950 --> 00:00:42.960 align:start position:0%
a countless number of blog posts about
 

00:00:42.960 --> 00:00:45.110 align:start position:0%
a countless number of blog posts about
monads<00:00:43.520><c> in</c><00:00:43.680><c> haskell</c><00:00:44.160><c> you</c><00:00:44.399><c> write</c><00:00:44.559><c> declarative</c>

00:00:45.110 --> 00:00:45.120 align:start position:0%
monads in haskell you write declarative
 

00:00:45.120 --> 00:00:46.950 align:start position:0%
monads in haskell you write declarative
code<00:00:45.520><c> where</c><00:00:45.680><c> the</c><00:00:45.840><c> program</c><00:00:46.320><c> is</c><00:00:46.480><c> a</c><00:00:46.559><c> single</c>

00:00:46.950 --> 00:00:46.960 align:start position:0%
code where the program is a single
 

00:00:46.960 --> 00:00:48.790 align:start position:0%
code where the program is a single
expression<00:00:47.600><c> that</c><00:00:47.760><c> is</c><00:00:48.000><c> executed</c><00:00:48.559><c> by</c>

00:00:48.790 --> 00:00:48.800 align:start position:0%
expression that is executed by
 

00:00:48.800 --> 00:00:50.950 align:start position:0%
expression that is executed by
evaluating<00:00:49.440><c> that</c><00:00:49.680><c> expression</c><00:00:50.239><c> it</c><00:00:50.399><c> also</c><00:00:50.640><c> uses</c>

00:00:50.950 --> 00:00:50.960 align:start position:0%
evaluating that expression it also uses
 

00:00:50.960 --> 00:00:52.709 align:start position:0%
evaluating that expression it also uses
lazy<00:00:51.280><c> evaluation</c><00:00:52.079><c> which</c><00:00:52.320><c> means</c><00:00:52.559><c> an</c>

00:00:52.709 --> 00:00:52.719 align:start position:0%
lazy evaluation which means an
 

00:00:52.719 --> 00:00:55.029 align:start position:0%
lazy evaluation which means an
expression<00:00:53.280><c> is</c><00:00:53.440><c> not</c><00:00:53.760><c> evaluated</c><00:00:54.480><c> until</c><00:00:54.800><c> it's</c>

00:00:55.029 --> 00:00:55.039 align:start position:0%
expression is not evaluated until it's
 

00:00:55.039 --> 00:00:56.709 align:start position:0%
expression is not evaluated until it's
actually<00:00:55.360><c> used</c><00:00:55.680><c> by</c><00:00:55.920><c> a</c><00:00:56.000><c> function</c><00:00:56.399><c> this</c><00:00:56.559><c> can</c>

00:00:56.709 --> 00:00:56.719 align:start position:0%
actually used by a function this can
 

00:00:56.719 --> 00:00:58.470 align:start position:0%
actually used by a function this can
result<00:00:57.039><c> in</c><00:00:57.120><c> big</c><00:00:57.360><c> performance</c><00:00:57.840><c> gains</c><00:00:58.160><c> but</c>

00:00:58.470 --> 00:00:58.480 align:start position:0%
result in big performance gains but
 

00:00:58.480 --> 00:01:00.630 align:start position:0%
result in big performance gains but
unpredictable<00:00:59.120><c> memory</c><00:00:59.440><c> use</c><00:00:59.680><c> at</c><00:00:59.760><c> runtime</c><00:01:00.399><c> all</c>

00:01:00.630 --> 00:01:00.640 align:start position:0%
unpredictable memory use at runtime all
 

00:01:00.640 --> 00:01:02.709 align:start position:0%
unpredictable memory use at runtime all
data<00:01:00.960><c> in</c><00:01:01.039><c> a</c><00:01:01.199><c> haskell</c><00:01:01.600><c> program</c><00:01:02.000><c> is</c><00:01:02.160><c> immutable</c>

00:01:02.709 --> 00:01:02.719 align:start position:0%
data in a haskell program is immutable
 

00:01:02.719 --> 00:01:04.630 align:start position:0%
data in a haskell program is immutable
which<00:01:02.879><c> produces</c><00:01:03.359><c> a</c><00:01:03.440><c> lot</c><00:01:03.600><c> of</c><00:01:03.760><c> memory</c><00:01:04.159><c> garbage</c>

00:01:04.630 --> 00:01:04.640 align:start position:0%
which produces a lot of memory garbage
 

00:01:04.640 --> 00:01:06.550 align:start position:0%
which produces a lot of memory garbage
so<00:01:04.799><c> it</c><00:01:04.960><c> contains</c><00:01:05.360><c> a</c><00:01:05.439><c> garbage</c><00:01:05.840><c> collector</c><00:01:06.320><c> to</c>

00:01:06.550 --> 00:01:06.560 align:start position:0%
so it contains a garbage collector to
 

00:01:06.560 --> 00:01:08.469 align:start position:0%
so it contains a garbage collector to
clean<00:01:06.799><c> things</c><00:01:07.040><c> up</c><00:01:07.280><c> to</c><00:01:07.439><c> get</c><00:01:07.600><c> started</c><00:01:08.159><c> install</c>

00:01:08.469 --> 00:01:08.479 align:start position:0%
clean things up to get started install
 

00:01:08.479 --> 00:01:10.630 align:start position:0%
clean things up to get started install
the<00:01:08.640><c> glasgow</c><00:01:09.200><c> haskell</c><00:01:09.600><c> compiler</c><00:01:10.159><c> then</c><00:01:10.400><c> create</c>

00:01:10.630 --> 00:01:10.640 align:start position:0%
the glasgow haskell compiler then create
 

00:01:10.640 --> 00:01:12.789 align:start position:0%
the glasgow haskell compiler then create
a<00:01:10.720><c> file</c><00:01:11.119><c> ending</c><00:01:11.439><c> in</c><00:01:11.520><c> dot</c><00:01:11.760><c> hs</c><00:01:12.320><c> we</c><00:01:12.479><c> don't</c><00:01:12.640><c> work</c>

00:01:12.789 --> 00:01:12.799 align:start position:0%
a file ending in dot hs we don't work
 

00:01:12.799 --> 00:01:14.870 align:start position:0%
a file ending in dot hs we don't work
with<00:01:12.960><c> statements</c><00:01:13.360><c> here</c><00:01:13.760><c> only</c><00:01:14.080><c> expressions</c>

00:01:14.870 --> 00:01:14.880 align:start position:0%
with statements here only expressions
 

00:01:14.880 --> 00:01:16.630 align:start position:0%
with statements here only expressions
which<00:01:15.119><c> is</c><00:01:15.280><c> code</c><00:01:15.520><c> that</c><00:01:15.680><c> will</c><00:01:15.840><c> always</c><00:01:16.159><c> evaluate</c>

00:01:16.630 --> 00:01:16.640 align:start position:0%
which is code that will always evaluate
 

00:01:16.640 --> 00:01:18.789 align:start position:0%
which is code that will always evaluate
to<00:01:16.880><c> a</c><00:01:16.960><c> value</c><00:01:17.520><c> create</c><00:01:17.840><c> a</c><00:01:18.000><c> string</c><00:01:18.320><c> with</c><00:01:18.479><c> double</c>

00:01:18.789 --> 00:01:18.799 align:start position:0%
to a value create a string with double
 

00:01:18.799 --> 00:01:20.469 align:start position:0%
to a value create a string with double
quotes<00:01:19.280><c> then</c><00:01:19.439><c> give</c><00:01:19.600><c> it</c><00:01:19.759><c> a</c><00:01:19.840><c> name</c><00:01:20.159><c> with</c><00:01:20.320><c> the</c>

00:01:20.469 --> 00:01:20.479 align:start position:0%
quotes then give it a name with the
 

00:01:20.479 --> 00:01:22.469 align:start position:0%
quotes then give it a name with the
equal<00:01:20.799><c> sign</c><00:01:21.119><c> the</c><00:01:21.280><c> value</c><00:01:21.680><c> is</c><00:01:21.840><c> immutable</c><00:01:22.320><c> and</c>

00:01:22.469 --> 00:01:22.479 align:start position:0%
equal sign the value is immutable and
 

00:01:22.479 --> 00:01:24.070 align:start position:0%
equal sign the value is immutable and
can<00:01:22.640><c> never</c><00:01:22.880><c> be</c><00:01:23.040><c> changed</c><00:01:23.520><c> the</c><00:01:23.680><c> type</c><00:01:23.920><c> will</c>

00:01:24.070 --> 00:01:24.080 align:start position:0%
can never be changed the type will
 

00:01:24.080 --> 00:01:25.670 align:start position:0%
can never be changed the type will
automatically<00:01:24.560><c> be</c><00:01:24.720><c> inferred</c><00:01:25.200><c> or</c><00:01:25.360><c> we</c><00:01:25.520><c> can</c>

00:01:25.670 --> 00:01:25.680 align:start position:0%
automatically be inferred or we can
 

00:01:25.680 --> 00:01:27.749 align:start position:0%
automatically be inferred or we can
strongly<00:01:26.080><c> type</c><00:01:26.320><c> it</c><00:01:26.479><c> with</c><00:01:26.640><c> a</c><00:01:26.799><c> double</c><00:01:27.119><c> colon</c><00:01:27.600><c> as</c>

00:01:27.749 --> 00:01:27.759 align:start position:0%
strongly type it with a double colon as
 

00:01:27.759 --> 00:01:29.990 align:start position:0%
strongly type it with a double colon as
a<00:01:28.000><c> list</c><00:01:28.240><c> of</c><00:01:28.400><c> characters</c><00:01:29.119><c> now</c><00:01:29.280><c> to</c><00:01:29.439><c> define</c><00:01:29.840><c> a</c>

00:01:29.990 --> 00:01:30.000 align:start position:0%
a list of characters now to define a
 

00:01:30.000 --> 00:01:31.830 align:start position:0%
a list of characters now to define a
function<00:01:30.560><c> start</c><00:01:30.720><c> with</c><00:01:30.880><c> a</c><00:01:31.040><c> name</c><00:01:31.360><c> followed</c><00:01:31.680><c> by</c>

00:01:31.830 --> 00:01:31.840 align:start position:0%
function start with a name followed by
 

00:01:31.840 --> 00:01:33.510 align:start position:0%
function start with a name followed by
the<00:01:32.000><c> arguments</c><00:01:32.479><c> that</c><00:01:32.640><c> you</c><00:01:32.720><c> want</c><00:01:32.880><c> to</c><00:01:32.960><c> pass</c><00:01:33.280><c> to</c>

00:01:33.510 --> 00:01:33.520 align:start position:0%
the arguments that you want to pass to
 

00:01:33.520 --> 00:01:35.270 align:start position:0%
the arguments that you want to pass to
it<00:01:33.680><c> on</c><00:01:33.840><c> the</c><00:01:33.920><c> right</c><00:01:34.159><c> side</c><00:01:34.400><c> define</c><00:01:34.720><c> the</c><00:01:34.799><c> logic</c><00:01:35.200><c> of</c>

00:01:35.270 --> 00:01:35.280 align:start position:0%
it on the right side define the logic of
 

00:01:35.280 --> 00:01:36.950 align:start position:0%
it on the right side define the logic of
the<00:01:35.439><c> function</c><00:01:36.000><c> and</c><00:01:36.159><c> it</c><00:01:36.240><c> will</c><00:01:36.479><c> automatically</c>

00:01:36.950 --> 00:01:36.960 align:start position:0%
the function and it will automatically
 

00:01:36.960 --> 00:01:38.710 align:start position:0%
the function and it will automatically
return<00:01:37.280><c> a</c><00:01:37.360><c> value</c><00:01:37.759><c> based</c><00:01:38.079><c> on</c><00:01:38.159><c> the</c><00:01:38.240><c> result</c><00:01:38.640><c> of</c>

00:01:38.710 --> 00:01:38.720 align:start position:0%
return a value based on the result of
 

00:01:38.720 --> 00:01:40.550 align:start position:0%
return a value based on the result of
the<00:01:38.880><c> expression</c><00:01:39.439><c> we</c><00:01:39.600><c> can</c><00:01:39.759><c> also</c><00:01:40.079><c> statically</c>

00:01:40.550 --> 00:01:40.560 align:start position:0%
the expression we can also statically
 

00:01:40.560 --> 00:01:42.469 align:start position:0%
the expression we can also statically
type<00:01:40.799><c> it</c><00:01:40.960><c> using</c><00:01:41.200><c> an</c><00:01:41.360><c> arrow</c><00:01:41.680><c> to</c><00:01:41.840><c> separate</c><00:01:42.320><c> the</c>

00:01:42.469 --> 00:01:42.479 align:start position:0%
type it using an arrow to separate the
 

00:01:42.479 --> 00:01:44.389 align:start position:0%
type it using an arrow to separate the
argument<00:01:43.040><c> and</c><00:01:43.200><c> return</c><00:01:43.520><c> value</c><00:01:44.000><c> we</c><00:01:44.079><c> can</c><00:01:44.240><c> call</c>

00:01:44.389 --> 00:01:44.399 align:start position:0%
argument and return value we can call
 

00:01:44.399 --> 00:01:46.149 align:start position:0%
argument and return value we can call
the<00:01:44.560><c> function</c><00:01:44.960><c> by</c><00:01:45.200><c> referencing</c><00:01:45.680><c> its</c><00:01:45.840><c> name</c>

00:01:46.149 --> 00:01:46.159 align:start position:0%
the function by referencing its name
 

00:01:46.159 --> 00:01:48.230 align:start position:0%
the function by referencing its name
with<00:01:46.320><c> the</c><00:01:46.560><c> arguments</c><00:01:47.119><c> all</c><00:01:47.280><c> values</c><00:01:47.840><c> including</c>

00:01:48.230 --> 00:01:48.240 align:start position:0%
with the arguments all values including
 

00:01:48.240 --> 00:01:50.149 align:start position:0%
with the arguments all values including
functions<00:01:48.799><c> are</c><00:01:48.960><c> first</c><00:01:49.280><c> class</c><00:01:49.759><c> which</c><00:01:49.920><c> means</c>

00:01:50.149 --> 00:01:50.159 align:start position:0%
functions are first class which means
 

00:01:50.159 --> 00:01:52.069 align:start position:0%
functions are first class which means
they<00:01:50.240><c> can</c><00:01:50.399><c> be</c><00:01:50.560><c> passed</c><00:01:50.880><c> as</c><00:01:51.040><c> arguments</c><00:01:51.600><c> to</c><00:01:51.840><c> other</c>

00:01:52.069 --> 00:01:52.079 align:start position:0%
they can be passed as arguments to other
 

00:01:52.079 --> 00:01:53.910 align:start position:0%
they can be passed as arguments to other
functions<00:01:52.640><c> if</c><00:01:52.799><c> we</c><00:01:52.960><c> try</c><00:01:53.119><c> to</c><00:01:53.360><c> print</c><00:01:53.520><c> the</c><00:01:53.600><c> result</c>

00:01:53.910 --> 00:01:53.920 align:start position:0%
functions if we try to print the result
 

00:01:53.920 --> 00:01:55.670 align:start position:0%
functions if we try to print the result
to<00:01:54.000><c> the</c><00:01:54.159><c> standard</c><00:01:54.479><c> output</c><00:01:54.880><c> we</c><00:01:55.040><c> get</c><00:01:55.200><c> an</c><00:01:55.439><c> error</c>

00:01:55.670 --> 00:01:55.680 align:start position:0%
to the standard output we get an error
 

00:01:55.680 --> 00:01:57.670 align:start position:0%
to the standard output we get an error
that's<00:01:55.920><c> because</c><00:01:56.240><c> working</c><00:01:56.479><c> with</c><00:01:56.719><c> io</c><00:01:57.200><c> creates</c><00:01:57.520><c> a</c>

00:01:57.670 --> 00:01:57.680 align:start position:0%
that's because working with io creates a
 

00:01:57.680 --> 00:01:59.270 align:start position:0%
that's because working with io creates a
side<00:01:57.920><c> effect</c><00:01:58.320><c> to</c><00:01:58.479><c> write</c><00:01:58.719><c> a</c><00:01:58.799><c> program</c><00:01:59.119><c> that</c>

00:01:59.270 --> 00:01:59.280 align:start position:0%
side effect to write a program that
 

00:01:59.280 --> 00:02:01.109 align:start position:0%
side effect to write a program that
actually<00:01:59.600><c> does</c><00:01:59.840><c> something</c><00:02:00.320><c> we</c><00:02:00.479><c> write</c><00:02:00.719><c> a</c><00:02:00.880><c> main</c>

00:02:01.109 --> 00:02:01.119 align:start position:0%
actually does something we write a main
 

00:02:01.119 --> 00:02:03.190 align:start position:0%
actually does something we write a main
function<00:02:01.680><c> with</c><00:02:01.920><c> a</c><00:02:02.079><c> do</c><00:02:02.320><c> block</c><00:02:02.719><c> here</c><00:02:02.960><c> we</c><00:02:03.040><c> can</c>

00:02:03.190 --> 00:02:03.200 align:start position:0%
function with a do block here we can
 

00:02:03.200 --> 00:02:05.109 align:start position:0%
function with a do block here we can
chain<00:02:03.360><c> together</c><00:02:03.759><c> a</c><00:02:03.920><c> sequence</c><00:02:04.320><c> of</c><00:02:04.560><c> actions</c>

00:02:05.109 --> 00:02:05.119 align:start position:0%
chain together a sequence of actions
 

00:02:05.119 --> 00:02:06.630 align:start position:0%
chain together a sequence of actions
where<00:02:05.280><c> the</c><00:02:05.360><c> side</c><00:02:05.600><c> effects</c><00:02:06.000><c> are</c><00:02:06.079><c> abstracted</c>

00:02:06.630 --> 00:02:06.640 align:start position:0%
where the side effects are abstracted
 

00:02:06.640 --> 00:02:08.869 align:start position:0%
where the side effects are abstracted
away<00:02:07.119><c> made</c><00:02:07.360><c> possible</c><00:02:07.840><c> by</c><00:02:08.080><c> a</c><00:02:08.239><c> mathematical</c>

00:02:08.869 --> 00:02:08.879 align:start position:0%
away made possible by a mathematical
 

00:02:08.879 --> 00:02:10.949 align:start position:0%
away made possible by a mathematical
concept<00:02:09.440><c> known</c><00:02:09.679><c> as</c><00:02:09.920><c> the</c><00:02:10.080><c> monad</c><00:02:10.640><c> which</c><00:02:10.879><c> is</c>

00:02:10.949 --> 00:02:10.959 align:start position:0%
concept known as the monad which is
 

00:02:10.959 --> 00:02:12.550 align:start position:0%
concept known as the monad which is
basically<00:02:11.360><c> a</c><00:02:11.520><c> wrapper</c><00:02:12.000><c> that</c><00:02:12.160><c> can</c><00:02:12.319><c> make</c>

00:02:12.550 --> 00:02:12.560 align:start position:0%
basically a wrapper that can make
 

00:02:12.560 --> 00:02:14.790 align:start position:0%
basically a wrapper that can make
functional<00:02:12.959><c> code</c><00:02:13.280><c> more</c><00:02:13.520><c> modular</c><00:02:14.239><c> now</c><00:02:14.480><c> to</c><00:02:14.640><c> run</c>

00:02:14.790 --> 00:02:14.800 align:start position:0%
functional code more modular now to run
 

00:02:14.800 --> 00:02:16.470 align:start position:0%
functional code more modular now to run
your<00:02:14.959><c> code</c><00:02:15.280><c> you</c><00:02:15.440><c> can</c><00:02:15.599><c> use</c><00:02:15.760><c> the</c><00:02:16.000><c> interactive</c>

00:02:16.470 --> 00:02:16.480 align:start position:0%
your code you can use the interactive
 

00:02:16.480 --> 00:02:18.150 align:start position:0%
your code you can use the interactive
interpreter<00:02:17.120><c> or</c><00:02:17.360><c> compile</c><00:02:17.760><c> it</c><00:02:17.840><c> to</c><00:02:18.000><c> an</c>

00:02:18.150 --> 00:02:18.160 align:start position:0%
interpreter or compile it to an
 

00:02:18.160 --> 00:02:20.790 align:start position:0%
interpreter or compile it to an
executable<00:02:18.879><c> by</c><00:02:19.040><c> running</c><00:02:19.440><c> ghc</c><00:02:20.080><c> make</c><00:02:20.480><c> this</c><00:02:20.720><c> has</c>

00:02:20.790 --> 00:02:20.800 align:start position:0%
executable by running ghc make this has
 

00:02:20.800 --> 00:02:23.110 align:start position:0%
executable by running ghc make this has
been<00:02:20.959><c> haskell</c><00:02:21.520><c> in</c><00:02:21.760><c> 100</c><00:02:22.160><c> seconds</c><00:02:22.640><c> hit</c><00:02:22.879><c> the</c><00:02:22.959><c> like</c>

00:02:23.110 --> 00:02:23.120 align:start position:0%
been haskell in 100 seconds hit the like
 

00:02:23.120 --> 00:02:24.630 align:start position:0%
been haskell in 100 seconds hit the like
button<00:02:23.440><c> and</c><00:02:23.599><c> subscribe</c><00:02:24.080><c> if</c><00:02:24.160><c> you</c><00:02:24.319><c> want</c><00:02:24.400><c> to</c><00:02:24.480><c> see</c>

00:02:24.630 --> 00:02:24.640 align:start position:0%
button and subscribe if you want to see
 

00:02:24.640 --> 00:02:26.309 align:start position:0%
button and subscribe if you want to see
more<00:02:24.800><c> short</c><00:02:25.040><c> videos</c><00:02:25.360><c> like</c><00:02:25.520><c> this</c><00:02:25.920><c> thanks</c><00:02:26.160><c> for</c>

00:02:26.309 --> 00:02:26.319 align:start position:0%
more short videos like this thanks for
 

00:02:26.319 --> 00:02:28.309 align:start position:0%
more short videos like this thanks for
watching<00:02:26.879><c> and</c><00:02:27.120><c> i</c><00:02:27.200><c> will</c><00:02:27.440><c> see</c><00:02:27.599><c> you</c><00:02:27.840><c> in</c><00:02:28.000><c> the</c><00:02:28.080><c> next</c>

00:02:28.309 --> 00:02:28.319 align:start position:0%
watching and i will see you in the next
 

00:02:28.319 --> 00:02:31.280 align:start position:0%
watching and i will see you in the next
one

