haskell<00:00:00.719><c> a</c><00:00:00.960><c> statically</c><00:00:01.439><c> typed</c>
haskell a statically typed
haskell a statically typed
general-purpose<00:00:02.480><c> language</c><00:00:02.960><c> made</c><00:00:03.199><c> famous</c><00:00:03.679><c> for</c>
general-purpose language made famous for
general-purpose language made famous for
expanding<00:00:04.319><c> the</c><00:00:04.400><c> minds</c><00:00:04.640><c> of</c><00:00:04.720><c> developers</c><00:00:05.440><c> into</c>
expanding the minds of developers into
expanding the minds of developers into
the<00:00:05.759><c> functional</c><00:00:06.240><c> programming</c><00:00:06.720><c> paradigm</c><00:00:07.279><c> you</c>
the functional programming paradigm you
the functional programming paradigm you
see<00:00:07.839><c> haskell</c><00:00:08.400><c> is</c><00:00:08.480><c> a</c><00:00:08.639><c> purely</c><00:00:09.040><c> functional</c>
see haskell is a purely functional
see haskell is a purely functional
language<00:00:09.920><c> based</c><00:00:10.160><c> on</c><00:00:10.320><c> lambda</c><00:00:10.719><c> calculus</c><00:00:11.360><c> which</c>
language based on lambda calculus which
language based on lambda calculus which
means<00:00:11.840><c> a</c><00:00:12.000><c> function</c><00:00:12.559><c> always</c><00:00:12.799><c> produces</c><00:00:13.280><c> the</c>
means a function always produces the
means a function always produces the
same<00:00:13.679><c> output</c><00:00:14.240><c> given</c><00:00:14.559><c> the</c><00:00:14.639><c> same</c><00:00:14.960><c> input</c><00:00:15.440><c> unlike</c>
same output given the same input unlike
same output given the same input unlike
an<00:00:15.839><c> imperative</c><00:00:16.240><c> language</c><00:00:16.720><c> your</c><00:00:16.960><c> code</c><00:00:17.199><c> can't</c>
an imperative language your code can't
an imperative language your code can't
modify<00:00:17.920><c> the</c><00:00:18.080><c> inputs</c><00:00:18.480><c> or</c><00:00:18.640><c> produce</c><00:00:19.039><c> side</c>
modify the inputs or produce side
modify the inputs or produce side
effects<00:00:19.680><c> that</c><00:00:19.840><c> would</c><00:00:20.080><c> otherwise</c><00:00:20.480><c> change</c><00:00:20.800><c> the</c>
effects that would otherwise change the
effects that would otherwise change the
behavior<00:00:21.359><c> of</c><00:00:21.520><c> the</c><00:00:21.680><c> application</c><00:00:22.400><c> it</c><00:00:22.560><c> was</c><00:00:22.720><c> first</c>
behavior of the application it was first
behavior of the application it was first
developed<00:00:23.279><c> in</c><00:00:23.439><c> 1987</c><00:00:24.400><c> and</c><00:00:24.640><c> named</c><00:00:24.880><c> after</c>
developed in 1987 and named after
developed in 1987 and named after
logician<00:00:25.840><c> haskell</c><00:00:26.320><c> curry</c><00:00:26.800><c> whose</c><00:00:27.039><c> work</c><00:00:27.279><c> had</c><00:00:27.439><c> a</c>
logician haskell curry whose work had a
logician haskell curry whose work had a
massive<00:00:27.920><c> influence</c><00:00:28.400><c> on</c><00:00:28.480><c> the</c><00:00:28.640><c> functional</c>
massive influence on the functional
massive influence on the functional
programming<00:00:29.519><c> world</c><00:00:29.920><c> it's</c><00:00:30.160><c> been</c><00:00:30.320><c> used</c><00:00:30.640><c> to</c>
programming world it's been used to
programming world it's been used to
build<00:00:30.960><c> a</c><00:00:31.119><c> wide</c><00:00:31.359><c> variety</c><00:00:31.760><c> of</c><00:00:31.920><c> server-side</c>
build a wide variety of server-side
build a wide variety of server-side
applications<00:00:33.280><c> like</c><00:00:33.440><c> the</c><00:00:33.600><c> hasura</c><00:00:34.160><c> api</c>
applications like the hasura api
applications like the hasura api
platform<00:00:35.360><c> spam</c><00:00:35.680><c> filtering</c><00:00:36.160><c> at</c><00:00:36.239><c> facebook</c><00:00:36.800><c> and</c>
platform spam filtering at facebook and
platform spam filtering at facebook and
compilers<00:00:37.680><c> for</c><00:00:37.920><c> other</c><00:00:38.160><c> languages</c><00:00:38.719><c> like</c><00:00:38.960><c> elm</c>
compilers for other languages like elm
compilers for other languages like elm
and<00:00:39.440><c> purescript</c><00:00:40.079><c> and</c><00:00:40.239><c> it's</c><00:00:40.399><c> responsible</c><00:00:40.960><c> for</c>
and purescript and it's responsible for
and purescript and it's responsible for
a<00:00:41.280><c> countless</c><00:00:41.680><c> number</c><00:00:41.920><c> of</c><00:00:42.000><c> blog</c><00:00:42.320><c> posts</c><00:00:42.640><c> about</c>
a countless number of blog posts about
a countless number of blog posts about
monads<00:00:43.520><c> in</c><00:00:43.680><c> haskell</c><00:00:44.160><c> you</c><00:00:44.399><c> write</c><00:00:44.559><c> declarative</c>
monads in haskell you write declarative
monads in haskell you write declarative
code<00:00:45.520><c> where</c><00:00:45.680><c> the</c><00:00:45.840><c> program</c><00:00:46.320><c> is</c><00:00:46.480><c> a</c><00:00:46.559><c> single</c>
code where the program is a single
code where the program is a single
expression<00:00:47.600><c> that</c><00:00:47.760><c> is</c><00:00:48.000><c> executed</c><00:00:48.559><c> by</c>
expression that is executed by
expression that is executed by
evaluating<00:00:49.440><c> that</c><00:00:49.680><c> expression</c><00:00:50.239><c> it</c><00:00:50.399><c> also</c><00:00:50.640><c> uses</c>
evaluating that expression it also uses
evaluating that expression it also uses
lazy<00:00:51.280><c> evaluation</c><00:00:52.079><c> which</c><00:00:52.320><c> means</c><00:00:52.559><c> an</c>
lazy evaluation which means an
lazy evaluation which means an
expression<00:00:53.280><c> is</c><00:00:53.440><c> not</c><00:00:53.760><c> evaluated</c><00:00:54.480><c> until</c><00:00:54.800><c> it's</c>
expression is not evaluated until it's
expression is not evaluated until it's
actually<00:00:55.360><c> used</c><00:00:55.680><c> by</c><00:00:55.920><c> a</c><00:00:56.000><c> function</c><00:00:56.399><c> this</c><00:00:56.559><c> can</c>
actually used by a function this can
actually used by a function this can
result<00:00:57.039><c> in</c><00:00:57.120><c> big</c><00:00:57.360><c> performance</c><00:00:57.840><c> gains</c><00:00:58.160><c> but</c>
result in big performance gains but
result in big performance gains but
unpredictable<00:00:59.120><c> memory</c><00:00:59.440><c> use</c><00:00:59.680><c> at</c><00:00:59.760><c> runtime</c><00:01:00.399><c> all</c>
unpredictable memory use at runtime all
unpredictable memory use at runtime all
data<00:01:00.960><c> in</c><00:01:01.039><c> a</c><00:01:01.199><c> haskell</c><00:01:01.600><c> program</c><00:01:02.000><c> is</c><00:01:02.160><c> immutable</c>
data in a haskell program is immutable
data in a haskell program is immutable
which<00:01:02.879><c> produces</c><00:01:03.359><c> a</c><00:01:03.440><c> lot</c><00:01:03.600><c> of</c><00:01:03.760><c> memory</c><00:01:04.159><c> garbage</c>
which produces a lot of memory garbage
which produces a lot of memory garbage
so<00:01:04.799><c> it</c><00:01:04.960><c> contains</c><00:01:05.360><c> a</c><00:01:05.439><c> garbage</c><00:01:05.840><c> collector</c><00:01:06.320><c> to</c>
so it contains a garbage collector to
so it contains a garbage collector to
clean<00:01:06.799><c> things</c><00:01:07.040><c> up</c><00:01:07.280><c> to</c><00:01:07.439><c> get</c><00:01:07.600><c> started</c><00:01:08.159><c> install</c>
clean things up to get started install
clean things up to get started install
the<00:01:08.640><c> glasgow</c><00:01:09.200><c> haskell</c><00:01:09.600><c> compiler</c><00:01:10.159><c> then</c><00:01:10.400><c> create</c>
the glasgow haskell compiler then create
the glasgow haskell compiler then create
a<00:01:10.720><c> file</c><00:01:11.119><c> ending</c><00:01:11.439><c> in</c><00:01:11.520><c> dot</c><00:01:11.760><c> hs</c><00:01:12.320><c> we</c><00:01:12.479><c> don't</c><00:01:12.640><c> work</c>
a file ending in dot hs we don't work
a file ending in dot hs we don't work
with<00:01:12.960><c> statements</c><00:01:13.360><c> here</c><00:01:13.760><c> only</c><00:01:14.080><c> expressions</c>
with statements here only expressions
with statements here only expressions
which<00:01:15.119><c> is</c><00:01:15.280><c> code</c><00:01:15.520><c> that</c><00:01:15.680><c> will</c><00:01:15.840><c> always</c><00:01:16.159><c> evaluate</c>
which is code that will always evaluate
which is code that will always evaluate
to<00:01:16.880><c> a</c><00:01:16.960><c> value</c><00:01:17.520><c> create</c><00:01:17.840><c> a</c><00:01:18.000><c> string</c><00:01:18.320><c> with</c><00:01:18.479><c> double</c>
to a value create a string with double
to a value create a string with double
quotes<00:01:19.280><c> then</c><00:01:19.439><c> give</c><00:01:19.600><c> it</c><00:01:19.759><c> a</c><00:01:19.840><c> name</c><00:01:20.159><c> with</c><00:01:20.320><c> the</c>
quotes then give it a name with the
quotes then give it a name with the
equal<00:01:20.799><c> sign</c><00:01:21.119><c> the</c><00:01:21.280><c> value</c><00:01:21.680><c> is</c><00:01:21.840><c> immutable</c><00:01:22.320><c> and</c>
equal sign the value is immutable and
equal sign the value is immutable and
can<00:01:22.640><c> never</c><00:01:22.880><c> be</c><00:01:23.040><c> changed</c><00:01:23.520><c> the</c><00:01:23.680><c> type</c><00:01:23.920><c> will</c>
can never be changed the type will
can never be changed the type will
automatically<00:01:24.560><c> be</c><00:01:24.720><c> inferred</c><00:01:25.200><c> or</c><00:01:25.360><c> we</c><00:01:25.520><c> can</c>
automatically be inferred or we can
automatically be inferred or we can
strongly<00:01:26.080><c> type</c><00:01:26.320><c> it</c><00:01:26.479><c> with</c><00:01:26.640><c> a</c><00:01:26.799><c> double</c><00:01:27.119><c> colon</c><00:01:27.600><c> as</c>
strongly type it with a double colon as
strongly type it with a double colon as
a<00:01:28.000><c> list</c><00:01:28.240><c> of</c><00:01:28.400><c> characters</c><00:01:29.119><c> now</c><00:01:29.280><c> to</c><00:01:29.439><c> define</c><00:01:29.840><c> a</c>
a list of characters now to define a
a list of characters now to define a
function<00:01:30.560><c> start</c><00:01:30.720><c> with</c><00:01:30.880><c> a</c><00:01:31.040><c> name</c><00:01:31.360><c> followed</c><00:01:31.680><c> by</c>
function start with a name followed by
function start with a name followed by
the<00:01:32.000><c> arguments</c><00:01:32.479><c> that</c><00:01:32.640><c> you</c><00:01:32.720><c> want</c><00:01:32.880><c> to</c><00:01:32.960><c> pass</c><00:01:33.280><c> to</c>
the arguments that you want to pass to
the arguments that you want to pass to
it<00:01:33.680><c> on</c><00:01:33.840><c> the</c><00:01:33.920><c> right</c><00:01:34.159><c> side</c><00:01:34.400><c> define</c><00:01:34.720><c> the</c><00:01:34.799><c> logic</c><00:01:35.200><c> of</c>
it on the right side define the logic of
it on the right side define the logic of
the<00:01:35.439><c> function</c><00:01:36.000><c> and</c><00:01:36.159><c> it</c><00:01:36.240><c> will</c><00:01:36.479><c> automatically</c>
the function and it will automatically
the function and it will automatically
return<00:01:37.280><c> a</c><00:01:37.360><c> value</c><00:01:37.759><c> based</c><00:01:38.079><c> on</c><00:01:38.159><c> the</c><00:01:38.240><c> result</c><00:01:38.640><c> of</c>
return a value based on the result of
return a value based on the result of
the<00:01:38.880><c> expression</c><00:01:39.439><c> we</c><00:01:39.600><c> can</c><00:01:39.759><c> also</c><00:01:40.079><c> statically</c>
the expression we can also statically
the expression we can also statically
type<00:01:40.799><c> it</c><00:01:40.960><c> using</c><00:01:41.200><c> an</c><00:01:41.360><c> arrow</c><00:01:41.680><c> to</c><00:01:41.840><c> separate</c><00:01:42.320><c> the</c>
type it using an arrow to separate the
type it using an arrow to separate the
argument<00:01:43.040><c> and</c><00:01:43.200><c> return</c><00:01:43.520><c> value</c><00:01:44.000><c> we</c><00:01:44.079><c> can</c><00:01:44.240><c> call</c>
argument and return value we can call
argument and return value we can call
the<00:01:44.560><c> function</c><00:01:44.960><c> by</c><00:01:45.200><c> referencing</c><00:01:45.680><c> its</c><00:01:45.840><c> name</c>
the function by referencing its name
the function by referencing its name
with<00:01:46.320><c> the</c><00:01:46.560><c> arguments</c><00:01:47.119><c> all</c><00:01:47.280><c> values</c><00:01:47.840><c> including</c>
with the arguments all values including
with the arguments all values including
functions<00:01:48.799><c> are</c><00:01:48.960><c> first</c><00:01:49.280><c> class</c><00:01:49.759><c> which</c><00:01:49.920><c> means</c>
functions are first class which means
functions are first class which means
they<00:01:50.240><c> can</c><00:01:50.399><c> be</c><00:01:50.560><c> passed</c><00:01:50.880><c> as</c><00:01:51.040><c> arguments</c><00:01:51.600><c> to</c><00:01:51.840><c> other</c>
they can be passed as arguments to other
they can be passed as arguments to other
functions<00:01:52.640><c> if</c><00:01:52.799><c> we</c><00:01:52.960><c> try</c><00:01:53.119><c> to</c><00:01:53.360><c> print</c><00:01:53.520><c> the</c><00:01:53.600><c> result</c>
functions if we try to print the result
functions if we try to print the result
to<00:01:54.000><c> the</c><00:01:54.159><c> standard</c><00:01:54.479><c> output</c><00:01:54.880><c> we</c><00:01:55.040><c> get</c><00:01:55.200><c> an</c><00:01:55.439><c> error</c>
to the standard output we get an error
to the standard output we get an error
that's<00:01:55.920><c> because</c><00:01:56.240><c> working</c><00:01:56.479><c> with</c><00:01:56.719><c> io</c><00:01:57.200><c> creates</c><00:01:57.520><c> a</c>
that's because working with io creates a
that's because working with io creates a
side<00:01:57.920><c> effect</c><00:01:58.320><c> to</c><00:01:58.479><c> write</c><00:01:58.719><c> a</c><00:01:58.799><c> program</c><00:01:59.119><c> that</c>
side effect to write a program that
side effect to write a program that
actually<00:01:59.600><c> does</c><00:01:59.840><c> something</c><00:02:00.320><c> we</c><00:02:00.479><c> write</c><00:02:00.719><c> a</c><00:02:00.880><c> main</c>
actually does something we write a main
actually does something we write a main
function<00:02:01.680><c> with</c><00:02:01.920><c> a</c><00:02:02.079><c> do</c><00:02:02.320><c> block</c><00:02:02.719><c> here</c><00:02:02.960><c> we</c><00:02:03.040><c> can</c>
function with a do block here we can
function with a do block here we can
chain<00:02:03.360><c> together</c><00:02:03.759><c> a</c><00:02:03.920><c> sequence</c><00:02:04.320><c> of</c><00:02:04.560><c> actions</c>
chain together a sequence of actions
chain together a sequence of actions
where<00:02:05.280><c> the</c><00:02:05.360><c> side</c><00:02:05.600><c> effects</c><00:02:06.000><c> are</c><00:02:06.079><c> abstracted</c>
where the side effects are abstracted
where the side effects are abstracted
away<00:02:07.119><c> made</c><00:02:07.360><c> possible</c><00:02:07.840><c> by</c><00:02:08.080><c> a</c><00:02:08.239><c> mathematical</c>
away made possible by a mathematical
away made possible by a mathematical
concept<00:02:09.440><c> known</c><00:02:09.679><c> as</c><00:02:09.920><c> the</c><00:02:10.080><c> monad</c><00:02:10.640><c> which</c><00:02:10.879><c> is</c>
concept known as the monad which is
concept known as the monad which is
basically<00:02:11.360><c> a</c><00:02:11.520><c> wrapper</c><00:02:12.000><c> that</c><00:02:12.160><c> can</c><00:02:12.319><c> make</c>
basically a wrapper that can make
basically a wrapper that can make
functional<00:02:12.959><c> code</c><00:02:13.280><c> more</c><00:02:13.520><c> modular</c><00:02:14.239><c> now</c><00:02:14.480><c> to</c><00:02:14.640><c> run</c>
functional code more modular now to run
functional code more modular now to run
your<00:02:14.959><c> code</c><00:02:15.280><c> you</c><00:02:15.440><c> can</c><00:02:15.599><c> use</c><00:02:15.760><c> the</c><00:02:16.000><c> interactive</c>
your code you can use the interactive
your code you can use the interactive
interpreter<00:02:17.120><c> or</c><00:02:17.360><c> compile</c><00:02:17.760><c> it</c><00:02:17.840><c> to</c><00:02:18.000><c> an</c>
interpreter or compile it to an
interpreter or compile it to an
executable<00:02:18.879><c> by</c><00:02:19.040><c> running</c><00:02:19.440><c> ghc</c><00:02:20.080><c> make</c><00:02:20.480><c> this</c><00:02:20.720><c> has</c>
executable by running ghc make this has
executable by running ghc make this has
been<00:02:20.959><c> haskell</c><00:02:21.520><c> in</c><00:02:21.760><c> 100</c><00:02:22.160><c> seconds</c><00:02:22.640><c> hit</c><00:02:22.879><c> the</c><00:02:22.959><c> like</c>
been haskell in 100 seconds hit the like
been haskell in 100 seconds hit the like
button<00:02:23.440><c> and</c><00:02:23.599><c> subscribe</c><00:02:24.080><c> if</c><00:02:24.160><c> you</c><00:02:24.319><c> want</c><00:02:24.400><c> to</c><00:02:24.480><c> see</c>
button and subscribe if you want to see
button and subscribe if you want to see
more<00:02:24.800><c> short</c><00:02:25.040><c> videos</c><00:02:25.360><c> like</c><00:02:25.520><c> this</c><00:02:25.920><c> thanks</c><00:02:26.160><c> for</c>
more short videos like this thanks for
more short videos like this thanks for
watching<00:02:26.879><c> and</c><00:02:27.120><c> i</c><00:02:27.200><c> will</c><00:02:27.440><c> see</c><00:02:27.599><c> you</c><00:02:27.840><c> in</c><00:02:28.000><c> the</c><00:02:28.080><c> next</c>
watching and i will see you in the next
watching and i will see you in the next
one
